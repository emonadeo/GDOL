# Note:
# Response schemas are not generated by github.com/deepmap/oapi-codegen
# See: https://github.com/deepmap/oapi-codegen/issues/513
# As a workaround always define response schemas in components first

openapi: 3.1.0
info:
  title: GDOL
  version: 2.0.0-alpha.1
  description: Geometry Dash Open List
  contact:
    name: Emonadeo
    email: emonadeo@gmail.com
    url: https://github.com/Emonadeo/GDOL
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT.html
externalDocs:
  url: https://github.com/Emonadeo/GDOL

tags:
  - name: Auth
  - name: Changelog
  - name: List
  - name: Levels
  - name: Records
  - name: Users

components:
  schemas:
    Auth:
      type: object
      properties:
        access_token:
          type: string
          description: JWT
        refresh_token:
          type: string
          description: JWT
      required:
        - access_token
        - refresh_token

    Changelog:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: RFC 3339-formatted Timestamp of the List
          example: 2018-11-13T20:20:39+00:00
        action:
          type: string
          description: Type of change
          enum: [add, archive, move]
        from:
          type: integer
          format: int16
          nullable: true
          description: Rank that the level got moved or deleted from
          minimum: 1
        to:
          type: integer
          format: int16
          nullable: true
          description: Rank that the level got moved or added to
          minimum: 1
        reason:
          type: string
          nullable: true
          description: Optional reason for movement or addition
        level:
          $ref: "#/components/schemas/Level"
        list:
          type: array
          description: List of Levels
          items:
            $ref: "#/components/schemas/Level"
      required:
        - timestamp
        - action
        - level
        - list
        - list_before

    Level:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Chromatic Haze
        gd_id:
          type: integer
          format: int64
          nullable: true
          example: 60587128
        video:
          type: string
          nullable: true
          description: URL to a video showcasing the level. In most cases this is the verification video.
          example: https://www.youtube.com/watch?v=QZf8vX4DF0A
        requirement:
          type: integer
          format: int16
          nullable: true
          description: Minimum required percentage to submit records
        user:
          description: User who published the level
          $ref: "#/components/schemas/User"
        verifier:
          description: User who verified the level
          $ref: "#/components/schemas/User"
        creators:
          type: array
          description: All users involved in the creation of the level
          items:
            $ref: "#/components/schemas/User"
      required:
        - id
        - name
        - user
        - verifier
        - creators

    LevelWithRank:
      allOf:
        - $ref: "#/components/schemas/Level"
        - type: object
          properties:
            rank:
              type: integer
              minimum: 1
              example: 1
          required:
            - rank

    LevelArchived:
      allOf:
        - $ref: "#/components/schemas/Level"
        - type: object
          properties:
            timestamp:
              type: string
              format: date-time
              description: RFC 3339-formatted Timestamp of Archival
              example: 2018-11-13T20:20:39+00:00
          required:
            - timestamp

    ListSettings:
      type: object
      properties:
        max_length:
          type: integer
          format: int16
          description: |
            The maximum amount of levels on the list.
            Automatically archives overflowing levels when decreased.
            When adding a level and the list is at capacity, the bottom-most level will be automatically archived.
          example: 150
        auto_unarchive:
          type: boolean
          description: |
            Automatically unarchive the top-most archived level and add to the bottom of the list when the length falls below `max_length`.
            This can happen in the following scenarios:
            * A level that is on the list gets archived manually
            * A level that is on the list gets permanently deleted and transitively removed from the list
            * `max_length` gets increased
          example: true
        override_requirement_after:
          type: integer
          format: int16
          nullable: true
          minimum: 1
          description: |
            Override requirement percentage with 100% of levels at or below the specified rank.
            If e.g. set to 75, all levels at or below rank 75 will have their requirement overridden with 100%.
          example: 75

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Gizbro
        nationality:
          type: string
          example: US
      required:
        - id
        - name

    UserWithScoreAndRank:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            score:
              type: number
              format: float
              example: 6078.45
            rank:
              type: integer
              format: int64
              minimum: 1
              example: 1
          required:
            - score
            - rank

    Record:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: RFC 3339-formatted Timestamp of the List
          example: 2018-11-13T20:20:39+00:00
        percentage:
          type: integer
          format: int16
          description: Progress on the level in percent
          minimum: 0
          maximum: 100
          example: 57
        video:
          type: string
          nullable: true
      required:
        - timestamp
        - percentage
        - video

    RecordWithUser:
      allOf:
        - $ref: "#/components/schemas/Record"
        - type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
          required:
            - user

    RecordWithLevel:
      allOf:
        - $ref: "#/components/schemas/Record"
        - type: object
          properties:
            level:
              $ref: "#/components/schemas/Level"
          required:
            - level

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  securitySchemes:
    Token:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # Auth
  "/auth":
    get:
      summary: Login
      description: Generates a pair of access and refresh tokens
      operationId: Auth
      tags:
        - Auth
      parameters:
        - name: code
          in: query
          required: true
          description: Discord OAuth2 code
          schema:
            type: string
      responses:
        "200":
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        "400":
          description: Invalid Code
        "404":
          description: User Not Found
    post:
      summary: Register
      description: |
        Sign up a new user with a given discord code.
        Subsequently generates a pair of access and refresh tokens.
      operationId: AuthRegister
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Discord OAuth2 code
                name:
                  type: string
                  description: Unique Username
                  example: Gizbro
              required:
                - code
                - name
      responses:
        "200":
          description: Registered and Authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        "400":
          description: |
            Bad Request
            * Invalid Code
            * User with given code already exists
            * Username is already taken
  "/auth/refresh":
    post:
      summary: Refresh
      description: Generates a pair of access and refresh tokens
      operationId: AuthRefresh
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required:
                - refresh_token
      responses:
        "200":
          description: Tokens Refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"

  # Changelog
  "/changelog":
    get:
      summary: Get Changelog
      description: Retrieves all entries of the list changelog
      operationId: GetChangelog
      tags:
        - Changelog
      responses:
        "200":
          description: Changelog Retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Changelog"

  # Levels
  "/levels":
    get:
      summary: Get Levels
      description: Get all levels
      operationId: GetLevels
      tags:
        - Levels
      security:
        - Token: []
      responses:
        "200":
          description: Levels Retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Level"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create Level
      description: Create a level
      operationId: CreateLevel
      tags:
        - Levels
      security:
        - Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Chromatic Haze
                gd_id:
                  type: integer
                  format: int64
                  nullable: true
                  example: 60587128
                video:
                  type: string
                  nullable: true
                  description: URL to a video showcasing the level. In most cases this is the verification video.
                  example: https://www.youtube.com/watch?v=QZf8vX4DF0A
                requirement:
                  type: integer
                  format: int16
                  nullable: true
                  description: Minimum required percentage to submit records
                user_id:
                  description: ID of the user who published the level
                  type: integer
                  format: int64
                verifier_id:
                  description: ID of the user who verified the level
                  type: integer
                  format: int64
                creator_ids:
                  type: array
                  description: IDs of all users involved in the creation of the level
                  items:
                    type: integer
                    format: int64
              required:
                - name
                - user_id
                - verifier_id
                - creator_ids
      responses:
        "200":
          description: Level Created
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  "/levels/{id}/records":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get Records by Level
      description: Get all records on a level ordered by percentage and timestamp
      operationId: GetRecordsByLevel
      tags:
        - Levels
        - Records
      responses:
        "200":
          description: Records Retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecordWithUser"

  # List
  "/list":
    get:
      summary: Get Levels on List
      description: Get all levels on the list ordered by rank
      operationId: GetList
      tags:
        - List
      responses:
        "200":
          description: Levels Retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Level"
  "/list/archive":
    get:
      summary: Get Archived Levels
      description: Get all archived levels ordered by date
      operationId: GetListArchive
      tags:
        - List
      responses:
        "200":
          description: Levels Retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LevelArchived"
  "/list/settings":
    get:
      summary: Get List Settings
      description: Get settings and meta information about the list
      operationId: GetListSettings
      tags:
        - List
      responses:
        "200":
          description: List Settings Retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ListSettings"
                required:
                  - max_length
                  - auto_unarchive
                  - override_requirement_after
    patch:
      summary: Update List Settings
      description: Update list settings
      operationId: UpdateListSettings
      tags:
        - List
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListSettings"
      security:
        - Token: []
      responses:
        "200":
          description: List Settings Updated
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  "/list/{rank}":
    parameters:
      - name: rank
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          example: 1
    get:
      summary: Get Level by List Rank
      description: Get a level by its rank on the list
      operationId: GetLevelByListRank
      tags:
        - List
      responses:
        "200":
          description: Level Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Level"
    post:
      summary: Add/Move Level to List Rank
      description: |
        Inserts a given level into the list at a given rank.
        Moves the level if it is already on the list.
        Removes the level from the archive if it contains it.
      operationId: UpdateList
      tags:
        - List
      security:
        - Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                level_id:
                  type: integer
                  format: int64
                reason:
                  type: string
              required:
                - level_id
      responses:
        "200":
          description: List Updated
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Archive Level by List Rank
      description: Removes a level from the list and appends it to archive.
      operationId: ArchiveLevelByListRank
      tags:
        - List
      security:
        - Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                reason:
                  type: string
      responses:
        "200":
          description: Level Archived
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Records
  "/records":
    post:
      summary: Create Record
      description: Creates a record of a user on a level
      operationId: CreateRecord
      tags:
        - Records
      security:
        - Token: []
      responses:
        "200":
          description: Record Created
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete Record
      description: Deletes a record of a user on a level
      operationId: DeleteRecord
      tags:
        - Records
      security:
        - Token: []
      responses:
        "200":
          description: Record Deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Users
  "/users":
    get:
      summary: Get Users
      description: Get all users ordered by score
      operationId: GetUsers
      tags:
        - Users
      responses:
        "200":
          description: Users Retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithScoreAndRank"
    post:
      summary: Create User
      description: |
        Create a new user.
        This can only be used by staff users with `users:write` permission.
        To register, use `POST /auth` instead.
      operationId: CreateUser
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                nationality:
                  type: string
                discord_id:
                  type: string
              required:
                - name
      responses:
        "200":
          description: User Created
        "400":
          description: Invalid Request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  "/users/{id}":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get User by ID
      description: Retrieves a user by a given ID
      operationId: GetUserById
      tags:
        - Users
      responses:
        "200":
          description: User Retrieved
    patch:
      summary: Update User by ID
      description: |
        Modify an existing user with a given ID.
        Authenticated users may modify their own `name` and/or `nationality`.
        `discord_id` and/or `banned` can only be modified by a user with `users:write` permission.
      operationId: UpdateUser
      tags:
        - Users
      security:
        - Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                nationality:
                  type: string
                discord_id:
                  type: string
                banned:
                  type: boolean
      responses:
        "200":
          description: User Updated
        "400":
          description: Invalid Request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete User by ID
      description: Permanently deletes a user with a given ID
      operationId: DeleteUserById
      tags:
        - Users
      security:
        - Token: []
      responses:
        "200":
          description: User Deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  "/users/{id}/records":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get Records by User
      description: Retrieves all records of a given user
      operationId: GetRecordsByUser
      tags:
        - Users
        - Records
      responses:
        "200":
          description: Records Retrieved
